{"version":3,"sources":["webpack:///main.fffcc236013c14ee0aa0.js","webpack:///./src/index.js","webpack:///./src/api/userApi.js","webpack:///./~/whatwg-fetch/fetch.js"],"names":["webpackJsonp","module","exports","__webpack_require__","global","_userApi","getUsers","then","result","usersBody","forEach","user","id","firstName","lastName","email","document","getElementById","innerHTML","call","this","get","url","fetch","onSuccess","onError","response","json","error","console","log","Object","defineProperty","value","self","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","items","iterator","next","shift","done","undefined","support","iterable","Symbol","Headers","headers","map","append","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","Body","_initBody","_bodyInit","_bodyText","Blob","prototype","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","toString","arrayBuffer","ArrayBuffer","Error","set","type","rejected","text","decode","JSON","parse","normalizeMethod","method","upcased","toUpperCase","methods","indexOf","Request","input","options","credentials","mode","referrer","form","trim","split","bytes","replace","join","decodeURIComponent","xhr","head","pairs","getAllResponseHeaders","header","key","Response","bodyInit","status","ok","statusText","e","list","push","values","getAll","has","hasOwnProperty","callback","thisArg","keys","entries","clone","redirectStatuses","redirect","RangeError","location","init","responseURL","getResponseHeader","request","XMLHttpRequest","responseText","ontimeout","open","withCredentials","responseType","setRequestHeader","send","polyfill"],"mappings":"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","file":"main.fffcc236013c14ee0aa0.js","sourcesContent":["webpackJsonp([0,1],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar _userApi = __webpack_require__(1);\n\t\n\t// Populate table of users via API call.\n\t(0, _userApi.getUsers)().then(function (result) {\n\t  var usersBody = \"\";\n\t\n\t  result.forEach(function (user) {\n\t    usersBody += '<tr>\\n      <td><a href=\"#\" data-id=\"' + user.id + '\" class=\"deleteUser\">Delete</a></td>\\n      <td>' + user.id + '</td>\\n      <td>' + user.firstName + '</td>\\n      <td>' + user.lastName + '</td>\\n      <td>' + user.email + '</td>\\n      </tr>';\n\t  });\n\t\n\t  global.document.getElementById('users').innerHTML = usersBody;\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.getUsers = getUsers;\n\t\n\t__webpack_require__(2);\n\t\n\tfunction getUsers() {\n\t  return get('users');\n\t}\n\t\n\tfunction get(url) {\n\t  return fetch(url).then(onSuccess, onError);\n\t}\n\t\n\tfunction onSuccess(response) {\n\t  return response.json();\n\t}\n\t\n\tfunction onError(error) {\n\t  console.log(error); // eslint-disable-line no-console\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t(function(self) {\n\t  'use strict';\n\t\n\t  if (self.fetch) {\n\t    return\n\t  }\n\t\n\t  var support = {\n\t    searchParams: 'URLSearchParams' in self,\n\t    iterable: 'Symbol' in self && 'iterator' in Symbol,\n\t    blob: 'FileReader' in self && 'Blob' in self && (function() {\n\t      try {\n\t        new Blob()\n\t        return true\n\t      } catch(e) {\n\t        return false\n\t      }\n\t    })(),\n\t    formData: 'FormData' in self,\n\t    arrayBuffer: 'ArrayBuffer' in self\n\t  }\n\t\n\t  function normalizeName(name) {\n\t    if (typeof name !== 'string') {\n\t      name = String(name)\n\t    }\n\t    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n\t      throw new TypeError('Invalid character in header field name')\n\t    }\n\t    return name.toLowerCase()\n\t  }\n\t\n\t  function normalizeValue(value) {\n\t    if (typeof value !== 'string') {\n\t      value = String(value)\n\t    }\n\t    return value\n\t  }\n\t\n\t  // Build a destructive iterator for the value list\n\t  function iteratorFor(items) {\n\t    var iterator = {\n\t      next: function() {\n\t        var value = items.shift()\n\t        return {done: value === undefined, value: value}\n\t      }\n\t    }\n\t\n\t    if (support.iterable) {\n\t      iterator[Symbol.iterator] = function() {\n\t        return iterator\n\t      }\n\t    }\n\t\n\t    return iterator\n\t  }\n\t\n\t  function Headers(headers) {\n\t    this.map = {}\n\t\n\t    if (headers instanceof Headers) {\n\t      headers.forEach(function(value, name) {\n\t        this.append(name, value)\n\t      }, this)\n\t\n\t    } else if (headers) {\n\t      Object.getOwnPropertyNames(headers).forEach(function(name) {\n\t        this.append(name, headers[name])\n\t      }, this)\n\t    }\n\t  }\n\t\n\t  Headers.prototype.append = function(name, value) {\n\t    name = normalizeName(name)\n\t    value = normalizeValue(value)\n\t    var list = this.map[name]\n\t    if (!list) {\n\t      list = []\n\t      this.map[name] = list\n\t    }\n\t    list.push(value)\n\t  }\n\t\n\t  Headers.prototype['delete'] = function(name) {\n\t    delete this.map[normalizeName(name)]\n\t  }\n\t\n\t  Headers.prototype.get = function(name) {\n\t    var values = this.map[normalizeName(name)]\n\t    return values ? values[0] : null\n\t  }\n\t\n\t  Headers.prototype.getAll = function(name) {\n\t    return this.map[normalizeName(name)] || []\n\t  }\n\t\n\t  Headers.prototype.has = function(name) {\n\t    return this.map.hasOwnProperty(normalizeName(name))\n\t  }\n\t\n\t  Headers.prototype.set = function(name, value) {\n\t    this.map[normalizeName(name)] = [normalizeValue(value)]\n\t  }\n\t\n\t  Headers.prototype.forEach = function(callback, thisArg) {\n\t    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n\t      this.map[name].forEach(function(value) {\n\t        callback.call(thisArg, value, name, this)\n\t      }, this)\n\t    }, this)\n\t  }\n\t\n\t  Headers.prototype.keys = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push(name) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.values = function() {\n\t    var items = []\n\t    this.forEach(function(value) { items.push(value) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.entries = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push([name, value]) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  if (support.iterable) {\n\t    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n\t  }\n\t\n\t  function consumed(body) {\n\t    if (body.bodyUsed) {\n\t      return Promise.reject(new TypeError('Already read'))\n\t    }\n\t    body.bodyUsed = true\n\t  }\n\t\n\t  function fileReaderReady(reader) {\n\t    return new Promise(function(resolve, reject) {\n\t      reader.onload = function() {\n\t        resolve(reader.result)\n\t      }\n\t      reader.onerror = function() {\n\t        reject(reader.error)\n\t      }\n\t    })\n\t  }\n\t\n\t  function readBlobAsArrayBuffer(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsArrayBuffer(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function readBlobAsText(blob) {\n\t    var reader = new FileReader()\n\t    reader.readAsText(blob)\n\t    return fileReaderReady(reader)\n\t  }\n\t\n\t  function Body() {\n\t    this.bodyUsed = false\n\t\n\t    this._initBody = function(body) {\n\t      this._bodyInit = body\n\t      if (typeof body === 'string') {\n\t        this._bodyText = body\n\t      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n\t        this._bodyBlob = body\n\t      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n\t        this._bodyFormData = body\n\t      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t        this._bodyText = body.toString()\n\t      } else if (!body) {\n\t        this._bodyText = ''\n\t      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n\t        // Only support ArrayBuffers for POST method.\n\t        // Receiving ArrayBuffers happens via Blobs, instead.\n\t      } else {\n\t        throw new Error('unsupported BodyInit type')\n\t      }\n\t\n\t      if (!this.headers.get('content-type')) {\n\t        if (typeof body === 'string') {\n\t          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n\t        } else if (this._bodyBlob && this._bodyBlob.type) {\n\t          this.headers.set('content-type', this._bodyBlob.type)\n\t        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n\t        }\n\t      }\n\t    }\n\t\n\t    if (support.blob) {\n\t      this.blob = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return Promise.resolve(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as blob')\n\t        } else {\n\t          return Promise.resolve(new Blob([this._bodyText]))\n\t        }\n\t      }\n\t\n\t      this.arrayBuffer = function() {\n\t        return this.blob().then(readBlobAsArrayBuffer)\n\t      }\n\t\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return readBlobAsText(this._bodyBlob)\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as text')\n\t        } else {\n\t          return Promise.resolve(this._bodyText)\n\t        }\n\t      }\n\t    } else {\n\t      this.text = function() {\n\t        var rejected = consumed(this)\n\t        return rejected ? rejected : Promise.resolve(this._bodyText)\n\t      }\n\t    }\n\t\n\t    if (support.formData) {\n\t      this.formData = function() {\n\t        return this.text().then(decode)\n\t      }\n\t    }\n\t\n\t    this.json = function() {\n\t      return this.text().then(JSON.parse)\n\t    }\n\t\n\t    return this\n\t  }\n\t\n\t  // HTTP methods whose capitalization should be normalized\n\t  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\t\n\t  function normalizeMethod(method) {\n\t    var upcased = method.toUpperCase()\n\t    return (methods.indexOf(upcased) > -1) ? upcased : method\n\t  }\n\t\n\t  function Request(input, options) {\n\t    options = options || {}\n\t    var body = options.body\n\t    if (Request.prototype.isPrototypeOf(input)) {\n\t      if (input.bodyUsed) {\n\t        throw new TypeError('Already read')\n\t      }\n\t      this.url = input.url\n\t      this.credentials = input.credentials\n\t      if (!options.headers) {\n\t        this.headers = new Headers(input.headers)\n\t      }\n\t      this.method = input.method\n\t      this.mode = input.mode\n\t      if (!body) {\n\t        body = input._bodyInit\n\t        input.bodyUsed = true\n\t      }\n\t    } else {\n\t      this.url = input\n\t    }\n\t\n\t    this.credentials = options.credentials || this.credentials || 'omit'\n\t    if (options.headers || !this.headers) {\n\t      this.headers = new Headers(options.headers)\n\t    }\n\t    this.method = normalizeMethod(options.method || this.method || 'GET')\n\t    this.mode = options.mode || this.mode || null\n\t    this.referrer = null\n\t\n\t    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n\t      throw new TypeError('Body not allowed for GET or HEAD requests')\n\t    }\n\t    this._initBody(body)\n\t  }\n\t\n\t  Request.prototype.clone = function() {\n\t    return new Request(this)\n\t  }\n\t\n\t  function decode(body) {\n\t    var form = new FormData()\n\t    body.trim().split('&').forEach(function(bytes) {\n\t      if (bytes) {\n\t        var split = bytes.split('=')\n\t        var name = split.shift().replace(/\\+/g, ' ')\n\t        var value = split.join('=').replace(/\\+/g, ' ')\n\t        form.append(decodeURIComponent(name), decodeURIComponent(value))\n\t      }\n\t    })\n\t    return form\n\t  }\n\t\n\t  function headers(xhr) {\n\t    var head = new Headers()\n\t    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n\t    pairs.forEach(function(header) {\n\t      var split = header.trim().split(':')\n\t      var key = split.shift().trim()\n\t      var value = split.join(':').trim()\n\t      head.append(key, value)\n\t    })\n\t    return head\n\t  }\n\t\n\t  Body.call(Request.prototype)\n\t\n\t  function Response(bodyInit, options) {\n\t    if (!options) {\n\t      options = {}\n\t    }\n\t\n\t    this.type = 'default'\n\t    this.status = options.status\n\t    this.ok = this.status >= 200 && this.status < 300\n\t    this.statusText = options.statusText\n\t    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n\t    this.url = options.url || ''\n\t    this._initBody(bodyInit)\n\t  }\n\t\n\t  Body.call(Response.prototype)\n\t\n\t  Response.prototype.clone = function() {\n\t    return new Response(this._bodyInit, {\n\t      status: this.status,\n\t      statusText: this.statusText,\n\t      headers: new Headers(this.headers),\n\t      url: this.url\n\t    })\n\t  }\n\t\n\t  Response.error = function() {\n\t    var response = new Response(null, {status: 0, statusText: ''})\n\t    response.type = 'error'\n\t    return response\n\t  }\n\t\n\t  var redirectStatuses = [301, 302, 303, 307, 308]\n\t\n\t  Response.redirect = function(url, status) {\n\t    if (redirectStatuses.indexOf(status) === -1) {\n\t      throw new RangeError('Invalid status code')\n\t    }\n\t\n\t    return new Response(null, {status: status, headers: {location: url}})\n\t  }\n\t\n\t  self.Headers = Headers\n\t  self.Request = Request\n\t  self.Response = Response\n\t\n\t  self.fetch = function(input, init) {\n\t    return new Promise(function(resolve, reject) {\n\t      var request\n\t      if (Request.prototype.isPrototypeOf(input) && !init) {\n\t        request = input\n\t      } else {\n\t        request = new Request(input, init)\n\t      }\n\t\n\t      var xhr = new XMLHttpRequest()\n\t\n\t      function responseURL() {\n\t        if ('responseURL' in xhr) {\n\t          return xhr.responseURL\n\t        }\n\t\n\t        // Avoid security warnings on getResponseHeader when not allowed by CORS\n\t        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n\t          return xhr.getResponseHeader('X-Request-URL')\n\t        }\n\t\n\t        return\n\t      }\n\t\n\t      xhr.onload = function() {\n\t        var options = {\n\t          status: xhr.status,\n\t          statusText: xhr.statusText,\n\t          headers: headers(xhr),\n\t          url: responseURL()\n\t        }\n\t        var body = 'response' in xhr ? xhr.response : xhr.responseText\n\t        resolve(new Response(body, options))\n\t      }\n\t\n\t      xhr.onerror = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.ontimeout = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.open(request.method, request.url, true)\n\t\n\t      if (request.credentials === 'include') {\n\t        xhr.withCredentials = true\n\t      }\n\t\n\t      if ('responseType' in xhr && support.blob) {\n\t        xhr.responseType = 'blob'\n\t      }\n\t\n\t      request.headers.forEach(function(value, name) {\n\t        xhr.setRequestHeader(name, value)\n\t      })\n\t\n\t      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n\t    })\n\t  }\n\t  self.fetch.polyfill = true\n\t})(typeof self !== 'undefined' ? self : this);\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** main.fffcc236013c14ee0aa0.js\n **/","import {getUsers} from './api/userApi';\n\n// Populate table of users via API call.\ngetUsers().then(result => {\n  let usersBody = \"\";\n\n  result.forEach(user => {\n    usersBody+= `<tr>\n      <td><a href=\"#\" data-id=\"${user.id}\" class=\"deleteUser\">Delete</a></td>\n      <td>${user.id}</td>\n      <td>${user.firstName}</td>\n      <td>${user.lastName}</td>\n      <td>${user.email}</td>\n      </tr>`\n  });\n\n  global.document.getElementById('users').innerHTML = usersBody;\n\n\n\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import 'whatwg-fetch';\n\n\nexport function getUsers() {\n  return get('users');\n}\n\nfunction get(url) {\n  return fetch(url).then(onSuccess, onError);\n}\n\n\n\nfunction onSuccess(response) {\n  return response.json();\n}\n\nfunction onError(error) {\n  console.log(error); // eslint-disable-line no-console\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/userApi.js\n **/","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/whatwg-fetch/fetch.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}